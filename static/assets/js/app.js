// Generated by CoffeeScript 1.12.5
(function() {
  var b64toBlob, cy_default_padding, cy_layouts, format_response_error, j, layout, len, objToBlob, save_canvas, setup_cy, show_input_hint,
    slice1 = [].slice;

  setup_cy = function(container) {
    var cy;
    cy = window.cy = cytoscape({
      container: container,
      minZoom: 0.1,
      maxZoom: 4,
      style: [
        {
          selector: 'node',
          style: {
            'content': 'data(name)',
            'width': function(e) {
              return Math.sqrt((e.data('nodes') || [0]).length) * 20;
            },
            'height': function(e) {
              return Math.sqrt((e.data('nodes') || [0]).length) * 20;
            },
            'text-valign': 'center',
            'text-halign': 'right',
            'background-color': function(e) {
              if (e.data('is_compound')) {
                return '#337ab7';
              } else {
                return '#11479e';
              }
            },
            'transition-duration': "100ms",
            'transition-property': "font-size,background-color",
            'border-style': 'dotted',
            'border-color': '#11479e',
            'border-width': function(e) {
              if (e.data('is_compound')) {
                return 3;
              } else {
                return 0;
              }
            }
          }
        }, {
          selector: 'edge',
          style: {
            'content': 'data(name)',
            'opacity': 0.6,
            'width': 2,
            'target-arrow-shape': 'triangle',
            'line-color': 'lightgrey',
            'target-arrow-color': 'lightgrey',
            'transition-duration': "100ms",
            'transition-property': "opacity,line-color,color,target-arrow-color"
          }
        }, {
          selector: 'node.source',
          style: {
            'background-color': '#5cb85c'
          }
        }, {
          selector: 'node.target',
          style: {
            'background-color': '#d9534f'
          }
        }, {
          selector: 'node.hovered',
          style: {
            'font-size': 24
          }
        }, {
          selector: 'edge.enabled',
          style: {
            'line-color': '#9dbaea',
            'target-arrow-color': '#9dbaea',
            'width': 4
          }
        }, {
          selector: 'edge.hovered',
          style: {
            'opacity': 1.0
          }
        }, {
          selector: 'node:selected',
          style: {
            'border-style': 'double',
            'border-color': 'purple',
            'border-width': '6'
          }
        }, {
          selector: 'node.highlighted',
          style: {
            'background-color': '#FFEB3B'
          }
        }, {
          selector: 'edge.highlighted',
          style: {
            'line-color': '#FFEB3B',
            'color': 'orange',
            'target-arrow-color': '#FFEB3B',
            'opacity': 1
          }
        }
      ]
    });
    cy.on('mouseover', 'node, edge', function(event) {
      return event.cyTarget.addClass('hovered');
    });
    cy.on('mouseout', 'node, edge', function(event) {
      return event.cyTarget.removeClass('hovered');
    });
    return cy;
  };

  cy_default_padding = 52;

  cy_layouts = [
    {
      name: 'random'
    }, {
      name: 'grid'
    }, {
      name: 'circle'
    }, {
      name: 'concentric'
    }, {
      name: 'breadthfirst'
    }, {
      name: 'dagre'
    }, {
      name: 'spread'
    }, {
      name: 'cose'
    }, {
      name: 'cose-bilkent'
    }, {
      name: 'cola'
    }
  ];

  for (j = 0, len = cy_layouts.length; j < len; j++) {
    layout = cy_layouts[j];
    layout.padding = cy_default_padding;
  }

  b64toBlob = function(b64Data, contentType, sliceSize) {
    var blob, byteArray, byteArrays, byteCharacters, byteNumbers, i, l, m, offset, ref, ref1, ref2, slice;
    contentType = contentType || '';
    sliceSize = sliceSize || 512;
    byteCharacters = atob(b64Data);
    byteArrays = [];
    for (offset = l = 0, ref = byteCharacters.length - 1, ref1 = sliceSize; ref1 > 0 ? l <= ref : l >= ref; offset = l += ref1) {
      slice = byteCharacters.slice(offset, offset + sliceSize);
      byteNumbers = new Array(slice.length);
      for (i = m = 0, ref2 = slice.length - 1; 0 <= ref2 ? m <= ref2 : m >= ref2; i = 0 <= ref2 ? ++m : --m) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }
    blob = new Blob(byteArrays, {
      type: contentType
    });
    return blob;
  };

  objToBlob = function(obj, beautiful) {
    var json;
    json = JSON.stringify(obj, null, beautiful ? 4 : 0);
    return new Blob([json], {
      type: 'application/json;charset=UTF-8'
    });
  };

  save_canvas = function(file_name) {
    var blob, data;
    data = cy.png({
      bg: 'white'
    }).replace(/^data:image\/\w+;base64,/, "");
    blob = b64toBlob(data, 'image/png');
    return saveAs(blob, file_name);
  };

  show_input_hint = function(input, content) {
    return setTimeout(function() {
      return input.focus().popover({
        content: content,
        container: 'body',
        placement: 'bottom'
      }).popover('show').one('keydown blur', function() {
        return $(this).popover('destroy');
      });
    }, 300);
  };

  format_response_error = function(response) {
    if (!!response.data && !!response.data.error) {
      return response.data.error;
    } else if (response.status === -1) {
      return "Oops, we have a connection problem...";
    } else {
      return '[' + response.status + '] ' + response.statusText;
    }
  };

  angular.module('app', ['ngRoute', 'ngSanitize']).config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/', {
        templateUrl: '/static/parts/home.html',
        controller: 'HomeController'
      }).when('/explain', {
        templateUrl: '/static/parts/explain.html',
        controller: 'ExplainController'
      }).when('/explore', {
        templateUrl: '/static/parts/explore.html',
        controller: 'ExploreController'
      }).otherwise({
        templateUrl: '/static/parts/404.html'
      });
    }
  ]).filter('reverse', function() {
    return function(items) {
      if (!!items && typeof items.slice === 'function') {
        return items.slice().reverse();
      }
      return items;
    };
  }).directive('navBar', function() {
    return {
      restrict: 'A',
      templateUrl: '/static/parts/nav-bar.html'
    };
  }).directive('modals', function() {
    return {
      restrict: 'A',
      templateUrl: '/static/parts/modals.html'
    };
  }).directive('entityInput', function() {
    return {
      restrict: 'A',
      scope: {
        item: '='
      },
      link: function(scope, element, attrs) {
        return $(element).typeahead({
          source: function(query, process) {
            return $.getJSON('api/entity?q=' + encodeURIComponent(query), function(data) {
              return process(data);
            });
          },
          afterSelect: function(item) {
            var base, url;
            base = 'http://dbpedia.org/resource/';
            url = item.url;
            if (url.startsWith(base)) {
              url = url.substring(base.length);
            }
            return scope.$apply(function() {
              return scope.item = url;
            });
          },
          items: 'all'
        });
      }
    };
  }).controller('RootController', [
    '$scope', '$location', '$http', function($scope, $location, $http) {
      $scope.app = {
        name: 'REVS',
        copyright: 'Copyright Â© Yukai Miao, 2017. Supervised by Prof. Wei Wang and Dr. Jianbin Qin, UNSW.',
        quote: {
          author: 'Christopher Strachey',
          title: 'A letter to Alan Turing, 1954',
          content: 'I am convinced that the crux of the problem of learning is recognizing relationships and being able to use them.'
        }
      };
      $scope.ui = {
        showNav: false,
        navMode: 'explain',
        authMode: 'signIn'
      };
      $scope.auth = {
        user: void 0
      };
      $scope.state = {
        querying_explain: false,
        querying_explore: false
      };
      $scope.config = {
        defaultMaxLength: 3,
        maxLengths: [2, 3, 4]
      };
      $scope.query = {
        source: void 0,
        target: void 0,
        maxLength: $scope.config.defaultMaxLength
      };
      $scope.getExplainURL = function(source, target, maxLength) {
        source = encodeURIComponent(source);
        target = encodeURIComponent(target);
        maxLength = maxLength || $scope.config.defaultMaxLength;
        return "/explain?source=" + source + "&target=" + target + "&maxLength=" + maxLength;
      };
      $scope.getExploreURL = function(entity) {
        entity = encodeURIComponent(entity);
        return "/explore?node=" + entity;
      };
      $scope.goExplain = function() {
        return $location.url($scope.getExplainURL($scope.query.source, $scope.query.target, $scope.query.maxLength));
      };
      $scope.goExplore = function(item) {
        if (item === 'source') {
          return $location.url($scope.getExploreURL($scope.query.source));
        } else if (item === 'target') {
          return $location.url($scope.getExploreURL($scope.query.target) + "&from=target");
        }
      };
      $scope.$on('requestModal', function() {
        var args, event;
        event = arguments[0], args = 2 <= arguments.length ? slice1.call(arguments, 1) : [];
        return $scope.$broadcast.apply($scope, ['showModal'].concat(slice1.call(args)));
      });
      return $http.get('api/users/me').then(function(response) {
        return $scope.auth.user = response.data;
      });
    }
  ]).controller('AuthModalController', [
    '$scope', '$http', function($scope, $http) {
      var $modal;
      $scope.forms = {
        signIn: {},
        signUp: {},
        signOut: {}
      };
      $modal = $('#auth_modal');
      $scope.$on('showModal', function(event, modal, mode) {
        if (modal === 'auth') {
          $scope.ui.authMode = mode;
          $modal.modal('show');
        }
      });
      $scope.signIn = function() {
        var $btnSubmit, form;
        form = $scope.forms.signIn;
        form.error = void 0;
        if (form.name === void 0 || form.name.length === 0) {
          form.error = 'User name is required';
          return;
        }
        if (form.password === void 0 || form.password.length === 0) {
          form.error = 'Password is required';
          return;
        }
        $btnSubmit = $('#btn_sign_in_submit');
        $btnSubmit.button('loading');
        return $http.post('api/users/login', {
          name: form.name,
          password: form.password
        }).then(function(response) {
          $btnSubmit.button('reset');
          $scope.auth.user = response.data;
          return $modal.modal('hide');
        }, function(response) {
          $btnSubmit.button('reset');
          return form.error = format_response_error(response);
        });
      };
      $scope.signUp = function() {
        var $btnSubmit, form;
        form = $scope.forms.signUp;
        form.error = void 0;
        if (form.name === void 0 || form.name.length === 0) {
          form.error = 'User name is required';
          return;
        }
        if (form.password === void 0 || form.password.length === 0) {
          form.error = 'Password is required';
          return;
        }
        if (form.password_again !== form.password) {
          form.error = 'Two passwords didn\'t match';
          return;
        }
        $btnSubmit = $('#btn_sign_up_submit');
        $btnSubmit.button('loading');
        return $http.post('api/users/register', {
          name: form.name,
          password: form.password
        }).then(function(response) {
          $btnSubmit.button('reset');
          $scope.auth.user = response.data;
          return $modal.modal('hide');
        }, function(response) {
          $btnSubmit.button('reset');
          return form.error = format_response_error(response);
        });
      };
      return $scope.signOut = function() {
        var $btnSubmit, form;
        form = $scope.forms.signOut;
        form.error = void 0;
        $btnSubmit = $('#btn_sign_out_submit');
        $btnSubmit.button('loading');
        return $http.get('api/users/logout').then(function(response) {
          $btnSubmit.button('reset');
          $scope.auth.user = void 0;
          return $modal.modal('hide');
        }, function(response) {
          $btnSubmit.button('reset');
          return form.error = format_response_error(response);
        });
      };
    }
  ]).controller('NavBarController', [
    '$scope', '$http', '$timeout', function($scope, $http, $timeout) {
      var $source, $target;
      $source = $('#nav_entity_source');
      $target = $('#nav_entity_target');
      $scope.explain = function() {
        var q;
        q = $scope.query;
        if (q.source === void 0 || q.source.length === 0) {
          show_input_hint($source, 'Please give me the source entity!');
          return;
        }
        if (q.target === void 0 || q.target.length === 0) {
          show_input_hint($target, 'Please give me the target entity!');
          return;
        }
        return $scope.goExplain();
      };
      $scope.explore_source = function() {
        var q;
        q = $scope.query;
        if (q.source === void 0 || q.source.length === 0) {
          show_input_hint($source, 'Please give me the source entity!');
          return;
        }
        return $scope.goExplore('source');
      };
      $scope.explore_target = function() {
        var q;
        q = $scope.query;
        if (q.target === void 0 || q.target.length === 0) {
          show_input_hint($target, 'Please give me the target entity!');
          return;
        }
        return $scope.goExplore('target');
      };
      $scope.switchExplainMode = function() {
        var oldMode;
        oldMode = $scope.ui.navMode;
        $scope.ui.navMode = 'explain';
        if (oldMode === 'explore_source') {
          return $timeout(function() {
            return $target.focus();
          }, 200);
        } else if (oldMode === 'explore_target') {
          return $timeout(function() {
            return $source.focus();
          }, 200);
        }
      };
      return $scope.showAuthModal = function(mode) {
        return $scope.$emit('requestModal', 'auth', mode);
      };
    }
  ]).controller('HomeController', [
    '$scope', '$http', '$location', function($scope, $http, $location) {
      var $source, $target;
      $scope.ui.showNav = false;
      $source = $('#entity_source');
      $target = $('#entity_target');
      $scope.explain = function() {
        var q;
        q = $scope.query;
        if (q.source === void 0 || q.source.length === 0) {
          show_input_hint($source, 'Please give me the source entity!');
          return;
        }
        if (q.target === void 0 || q.target.length === 0) {
          show_input_hint($target, 'Please give me the target entity!');
          return;
        }
        return $scope.goExplain();
      };
      $scope.explore_source = function() {
        var q;
        q = $scope.query;
        if (q.source === void 0 || q.source.length === 0) {
          show_input_hint($source, 'Please give me the source entity!');
          return;
        }
        return $scope.goExplore('source');
      };
      $scope.explore_target = function() {
        var q;
        q = $scope.query;
        if (q.target === void 0 || q.target.length === 0) {
          show_input_hint($target, 'Please give me the target entity!');
          return;
        }
        return $scope.goExplore('target');
      };
      return $scope.showAuthModal = function(mode) {
        return $scope.$emit('requestModal', 'auth', mode);
      };
    }
  ]).controller('ExplainController', [
    '$scope', '$location', '$timeout', '$http', function($scope, $location, $timeout, $http) {
      var $controller_wrapper, $graph_wrapper, $navbar, $nodeDetailsTab, cy, data, handle_data, highlight_end_timeout, highlight_interval, l, last_explain, len1, load_user_ratings, maxLength, maxLengthStr, params, source, target, update_graph_controller_position, update_graph_view, useLocalStorage;
      $scope.ui.showNav = true;
      params = $location.search();
      source = params['source'];
      target = params['target'];
      maxLengthStr = params['maxLength'];
      maxLength = maxLengthStr ? parseInt(maxLengthStr) : $scope.config.defaultMaxLength;
      if (!source || source.length === 0 || !target || target.length === 0) {
        $location.url('/');
        return;
      }
      $scope.query.source = source;
      if ($scope.query.source_name === void 0) {
        $scope.query.source_name = source.replace(/_/g, ' ');
      }
      $scope.query.target = target;
      if ($scope.query.target_name === void 0) {
        $scope.query.target_name = target.replace(/_/g, ' ');
      }
      $scope.query.maxLength = maxLength;
      $scope.ui.navMode = 'explain';
      $scope.rating_ready = false;
      $scope.zoomIn = function() {
        if ($scope.zoom_level >= $scope.predicate_priority.length - 1) {
          console.log('Cannot zoom in further');
          return;
        }
        $scope.zoom_level += 1;
        return $scope.update_graph();
      };
      $scope.zoomOut = function() {
        if ($scope.zoom_level <= 0) {
          console.log('Cannot zoom out further');
          return;
        }
        $scope.zoom_level -= 1;
        return $scope.update_graph();
      };
      $scope.saveImage = function() {
        return save_canvas(source + " - " + target + ".png");
      };
      $scope.saveGraphJson = function() {
        var blob;
        blob = objToBlob($scope.data, true);
        return saveAs(blob, source + " - " + target + ".json");
      };
      $scope.reverseList = function(list) {
        return list;
      };
      $scope.clean_label = function(label) {
        var ns_end;
        if (label === void 0 || label === null) {
          return label;
        }
        if (label[0] !== '<') {
          ns_end = label.indexOf(':');
          if (ns_end > 0) {
            label = label.substr(ns_end + 1);
          }
        }
        label = label.replace(/_/g, ' ');
        return label;
      };
      $scope.clean_compound_label = function(label) {
        return label.split('/').map(function(s) {
          return $scope.clean_label(s);
        }).join('/');
      };
      highlight_interval = 0;
      highlight_end_timeout = 0;
      $scope.highlight_edge = function(node, edge_info) {
        var e, edge, from, items, l, len1, ref, tmp, to;
        from = cy.getElementById(node);
        to = cy.getElementById(edge_info.node);
        if (!edge_info.is_outgoing) {
          tmp = from;
          from = to;
          to = tmp;
        }
        edge = null;
        ref = from.edgesTo(to);
        for (l = 0, len1 = ref.length; l < len1; l++) {
          e = ref[l];
          if (e.data('predicate') === edge_info.predicate) {
            edge = e;
            break;
          }
        }
        items = from.union(to).union(edge);
        cy.fit(items, cy_default_padding);
        clearTimeout(highlight_end_timeout);
        clearInterval(highlight_interval);
        items.addClass('highlighted');
        highlight_interval = setInterval(function() {
          return items.toggleClass('highlighted');
        }, 300);
        return highlight_end_timeout = setTimeout(function() {
          clearInterval(highlight_interval);
          return items.removeClass('highlighted');
        }, 1100);
      };
      $scope.highlightInnerNode = function(compoundNode, innerNode, reverse) {
        var compound, e, edge, edge_info, from, highlight_items, item, l, len1, len2, len3, m, n, other, otherGroupId, ref, ref1, results, tmp, to;
        compound = cy.getElementById(compoundNode);
        highlight_items = [];
        ref = $scope.adj_lists[innerNode];
        for (l = 0, len1 = ref.length; l < len1; l++) {
          edge_info = ref[l];
          other = edge_info.node;
          otherGroupId = $scope.view_model.nodes_to_group[other];
          from = compound;
          to = cy.getElementById(otherGroupId);
          highlight_items.push(to);
          if (!edge_info.is_outgoing) {
            tmp = from;
            from = to;
            to = tmp;
          }
          edge = null;
          ref1 = from.edgesTo(to);
          for (m = 0, len2 = ref1.length; m < len2; m++) {
            e = ref1[m];
            if (e.data('predicate') === edge_info.predicate) {
              edge = e;
              break;
            }
          }
          if (edge === null) {
            console.warn(edge_info);
          } else {
            highlight_items.push(edge);
          }
        }
        results = [];
        for (n = 0, len3 = highlight_items.length; n < len3; n++) {
          item = highlight_items[n];
          if (!reverse) {
            results.push(item.addClass('highlighted'));
          } else {
            results.push(item.removeClass('highlighted'));
          }
        }
        return results;
      };
      $scope.reset_viewport = function() {
        return cy.fit(void 0, cy_default_padding);
      };
      $scope.hide_controller = function(hide) {
        var graph_width, width_diff;
        if (hide) {
          if (!$controller_wrapper.hasClass('collapsed')) {
            graph_width = $graph_wrapper.width();
            $controller_wrapper.addClass('collapsed');
            $graph_wrapper.addClass('expanded');
            width_diff = $graph_wrapper.width() - graph_width;
            cy.panBy({
              x: width_diff
            });
            cy.resize();
            cy.resize();
          }
        } else {
          if ($controller_wrapper.hasClass('collapsed')) {
            graph_width = $graph_wrapper.width();
            $controller_wrapper.removeClass('collapsed');
            $graph_wrapper.removeClass('expanded');
            width_diff = $graph_wrapper.width() - graph_width + 15;
            cy.panBy({
              x: width_diff
            });
            cy.resize();
            cy.resize();
          }
        }
      };
      $scope.layouts = cy_layouts;
      for (l = 0, len1 = cy_layouts.length; l < len1; l++) {
        layout = cy_layouts[l];
        if (layout.name === 'dagre') {
          $scope.layout = layout;
          break;
        }
      }
      $scope.update_layout = function() {
        return cy.layout($scope.layout);
      };
      $scope.$watch('auth.user', function(newVal) {
        if (!!newVal && !!$scope.data) {
          return load_user_ratings();
        }
      });
      $scope.$watch('auto_mode', function(newVal, oldVal) {
        var i, item, len2, m, need_update, ref;
        if (oldVal === false && newVal === true) {
          need_update = false;
          ref = $scope.predicate_priority;
          for (i = m = 0, len2 = ref.length; m < len2; i = ++m) {
            item = ref[i];
            if (i <= $scope.zoom_level) {
              if (!item.active) {
                need_update = true;
                break;
              }
            } else {
              if (item.active) {
                need_update = true;
                break;
              }
            }
          }
          if (need_update) {
            return $scope.update_graph();
          }
        }
      });
      $('.btn-show-rankings').on('click', function() {
        var body;
        body = $("html, body");
        return body.stop().animate({
          scrollTop: $('.graph').height()
        }, '500', 'swing');
      });
      cy = setup_cy($('.graph-explain'));
      $nodeDetailsTab = $('a[href="#node-details"]');
      cy.on('tap', 'node', function(event) {
        $scope.$apply(function() {
          return $scope.focusedItem = event.cyTarget;
        });
        $scope.hide_controller(false);
        return $nodeDetailsTab.tab('show');
      });
      $('[data-toggle="tooltip"]').tooltip();
      $scope.open_explore_window = function(target) {
        var id;
        if (target.isEdge()) {
          id = target.data('predicate');
        } else {
          id = target.data('id');
        }
        if (id[0] !== '<') {
          console.warn('Only DBpedia resource nodes are supported now!');
          return;
        }
        id = id.substr(1, id.length - 2);
        id = encodeURIComponent(id);
        window.open("#/explore?node=" + id);
      };
      $('a[data-toggle="tab"]').on('click', function(e) {
        e.preventDefault();
        return $(this).tab('show');
      });
      $navbar = $('.app-navbar');
      $controller_wrapper = $('.graph-controller-wrapper');
      $graph_wrapper = $('.graph-wrapper');
      update_graph_controller_position = function() {
        return $controller_wrapper.css('padding-top', $navbar.height());
      };
      $(window).on('resize', update_graph_controller_position);
      setTimeout(update_graph_controller_position, 500);
      load_user_ratings = function() {
        if ($scope.data.rankings === void 0) {
          return;
        }
        $scope.rating_ready = false;
        return $http.get("api/ratings?source=" + (encodeURIComponent(source)) + "&target=" + (encodeURIComponent(target))).then(function(response) {
          var i, len2, len3, len4, len5, m, mismatch, n, o, p, pathRank, rating, rating_path, rating_triple, record, record_path, record_triple, ref;
          pathRank = $scope.data.rankings.pathInfoRanking;
          for (m = 0, len2 = pathRank.length; m < len2; m++) {
            record = pathRank[m];
            record.rating = void 0;
            record.rating_id = void 0;
          }
          ref = response.data;
          for (n = 0, len3 = ref.length; n < len3; n++) {
            rating = ref[n];
            rating_path = rating.path;
            for (o = 0, len4 = pathRank.length; o < len4; o++) {
              record = pathRank[o];
              record_path = record.object.triples;
              if (rating_path.length !== record_path.length) {
                continue;
              }
              mismatch = false;
              for (i = p = 0, len5 = rating_path.length; p < len5; i = ++p) {
                rating_triple = rating_path[i];
                record_triple = record_path[i];
                if (rating_triple.s !== record_triple.s || rating_triple.p !== record_triple.p || rating_triple.o !== record_triple.o) {
                  mismatch = true;
                  break;
                }
              }
              if (!mismatch) {
                record.rating = rating.rating;
                record.rating_id = rating.id;
              }
            }
          }
          return $scope.rating_ready = true;
        }, function(response) {
          return alert(format_response_error(response));
        });
      };
      handle_data = function(data) {
        var k, nodes_count;
        $scope.data = data;
        if (!!$scope.auth.user) {
          load_user_ratings();
        }
        $scope.source = data.source;
        $scope.target = data.target;
        $scope.nodes = core.get_node_set(data.triples);
        $scope.type_dict = core.get_clean_type_dict(data.types, $scope.nodes);
        $scope.adj_lists = core.triples_to_adj_lists(data.triples);
        $scope.predicate_priority = core.get_predicate_priority(data.triples);
        $scope.zoom_level = 0;
        $scope.type_info = core.get_type_info($scope.type_dict);
        $scope.type_hierarchy_view = core.compute_type_hierarchy_view($scope.type_info);
        $scope.auto_mode = true;
        nodes_count = 0;
        for (k in $scope.nodes) {
          nodes_count += 1;
        }
        console.log('[Raw Nodes]', nodes_count, '[Raw Edges]', $scope.data.triples.length);
        return $scope.update_graph();
      };
      $scope.update_graph = function() {
        var i, item, len2, len3, m, n, partition, ref, ref1, time_elapsed, time_start;
        $scope.focusedItem = null;
        time_start = Date.now();
        if ($scope.auto_mode) {
          ref = $scope.predicate_priority;
          for (i = m = 0, len2 = ref.length; m < len2; i = ++m) {
            item = ref[i];
            item.active = i <= $scope.zoom_level;
          }
        }
        $scope.init_partition = core.get_init_partition($scope.nodes, $scope.source, $scope.target, $scope.type_dict, $scope.type_info);
        partition = $scope.init_partition;
        ref1 = $scope.predicate_priority;
        for (n = 0, len3 = ref1.length; n < len3; n++) {
          item = ref1[n];
          if (item.active) {
            partition = simulation.get_coarsest_partition($scope.adj_lists, $scope.nodes, partition, item.predicate);
          }
        }
        $scope.partition = partition;
        $scope.view_model = core.compute_view_model($scope.adj_lists, $scope.type_dict, $scope.partition, $scope.view_model);
        update_graph_view();
        time_elapsed = Date.now() - time_start;
        return console.log('[Nodes]', cy.nodes().length, '[Edges]', cy.edges().length, '[Time]', time_elapsed);
      };
      update_graph_view = function() {
        var edge, len2, len3, len4, len5, m, n, node, o, old_node, p, predicate, ref, ref1, ref2, ref3;
        ref = $scope.view_model.nodes_removed;
        for (m = 0, len2 = ref.length; m < len2; m++) {
          node = ref[m];
          old_node = cy.getElementById(node.id);
          cy.remove(old_node);
        }
        ref1 = $scope.view_model.nodes_added;
        for (n = 0, len3 = ref1.length; n < len3; n++) {
          node = ref1[n];
          cy.add({
            data: {
              id: node.id,
              name: $scope.clean_compound_label(node.label),
              nodes: node.nodes,
              is_compound: node.nodes.length > 1
            }
          });
        }
        ref2 = $scope.view_model.edges_added;
        for (o = 0, len4 = ref2.length; o < len4; o++) {
          edge = ref2[o];
          cy.add({
            data: {
              name: $scope.clean_label(edge.predicate),
              predicate: edge.predicate,
              source: edge.source,
              target: edge.target
            }
          });
        }
        cy.$("[id='" + $scope.source + "']").addClass('source');
        cy.$("[id='" + $scope.target + "']").addClass('target');
        ref3 = $scope.predicate_priority;
        for (p = 0, len5 = ref3.length; p < len5; p++) {
          predicate = ref3[p];
          if (predicate.active) {
            cy.edges("[predicate='" + predicate.predicate + "']").addClass('enabled');
          } else {
            cy.edges("[predicate='" + predicate.predicate + "']").removeClass('enabled');
          }
        }
        return $scope.update_layout();
      };
      data = void 0;
      useLocalStorage = false;
      if (useLocalStorage) {
        last_explain = localStorage.getItem('last_explain');
        if (!!last_explain) {
          last_explain = JSON.parse(last_explain);
          if (last_explain.source === source && last_explain.target === target) {
            data = last_explain.result;
          }
        }
      }
      if (data === void 0) {
        $scope.state.querying_explain = true;
        return $http.get("api/explain?source=" + source + "&target=" + target + "&maxLength=" + maxLength).then(function(response) {
          $scope.state.querying_explain = false;
          handle_data(response.data);
          if (useLocalStorage) {
            localStorage.setItem('last_explain', JSON.stringify({
              source: source,
              target: target,
              result: response.data
            }));
          }
          return $timeout(function() {
            return cy.resize();
          }, 0);
        }, function(response) {
          $scope.state.querying_explain = false;
          return alert(format_response_error(response));
        });
      } else {
        return handle_data(data);
      }
    }
  ]).controller('ExploreController', [
    '$scope', '$location', '$http', '$sce', function($scope, $location, $http, $sce) {
      var from, node, params, url;
      $scope.ui.showNav = true;
      params = $location.search();
      node = params['node'];
      if (!node) {
        return;
      }
      from = params['from'];
      if (!from || from === 'source') {
        $scope.query.source = node;
        if ($scope.query.source_name === void 0) {
          $scope.query.source_name = node.replace(/_/g, ' ');
        }
        $scope.ui.navMode = 'explore_source';
      } else {
        $scope.query.target = node;
        if ($scope.query.target_name === void 0) {
          $scope.query.target_name = node.replace(/_/g, ' ');
        }
        $scope.ui.navMode = 'explore_target';
      }
      if (node.startsWith("http://") || node.startsWith("https://")) {
        url = node;
      } else {
        url = 'http://dbpedia.org/resource/' + node;
      }
      return $scope.url = $sce.trustAsResourceUrl(url);
    }
  ]);

}).call(this);

//# sourceMappingURL=app.js.map
